{
  /*
		// Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and
		// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
		// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
		// same ids are connected.
		// Example:
		"Print to console": {
			"prefix": "log",
			"body": [
				"console.log('$1');",
				"$2"
			],
			"description": "Log output to console"
		}
	*/
  "Print to console": {
    "prefix": "consolelogapplog",
    "body": [
      "console.log(`\\n\\t\\tLogging start\\n\\n\\n\\n ${2:label}\\n`, ${1:data}, `\\n\\n\\n\\n\\t\\tLogging ends\\n`)"
    ],
    "description": "Log to console with some debug info"
  },
  "Print to console error": {
    "prefix": "consolelogapplogerror",
    "body": [
      "console.log(new Error().stack, `\\n\\t\\tLogging start\\n\\n\\n\\n ${2:label}\\n`, ${1:data}, `\\n\\n\\n\\n\\t\\tLogging ends\\n`)"
    ],
    "description": "Log to console with some debug info"
  },
  "const function": {
    "prefix": "constantfunc",
    "body": ["const ${1:funcName} = (${2:props}) => {", "\t$0", "}"]
  },
  "export const function": {
    "prefix": "exportconstantfunc",
    "body": ["export const ${1:funcName} = (${2:props}) => {", "\t$0", "}"]
  },
  "export default const function": {
    "prefix": "exportdefaultconstantfunc",
    "body": [
      "export const ${1:funcName} = (${2:props}) => {",
      "\t$0",
      "}",
      "\n",
      "\n",
      "export default ${1:funcName}"
    ]
  },
  "export constant": {
    "prefix": "exportconstant",
    "body": "export const ${1:name} = $0"
  },
  "export default constant": {
    "prefix": "exportdefaultconstant",
    "body": [
      "export const ${1:name} = $0",
      "\n",
      "\n",
      "export default ${1:name}"
    ]
  },
  "test react": {
    "prefix": "testreact",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "import React, { ComponentType } from \"react\";",
      "import \"react-testing-library/cleanup-after-each\";",
      "import { render } from \"@testing-library/react\";",
      "import { ${1:Component} } from \"..\";",
      "",
      "",
      "it(\"renders\", () => {",
      "\tconst { ui } = makeComp({",
      "\t\t\tprops: {}",
      "\t});",
      "",
      "\tconst {} = render(ui);",
      "});",
      "",
      "////////////////////////// HELPER FUNCTIONS ///////////////////////////",
      "",
      "function makeComp({ props = {} } = {}) {",
      "\treturn {",
      "\t\t\tui: <${1:Component} {...props} />",
      "\t};",
      "}"
    ],
    "description": "test react"
  },
  "react test": {
    "prefix": "reacttest",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "import React, { ComponentType } from \"react\";",
      "import \"react-testing-library/cleanup-after-each\";",
      "import { render } from \"@testing-library/react\";",
      "import { ${1:Component} } from \"..\";",
      "",
      "",
      "it(\"renders\", () => {",
      "\tconst { ui } = makeComp({",
      "\t\t\tprops: {}",
      "\t});",
      "",
      "\tconst {} = render(ui);",
      "});",
      "",
      "////////////////////////// HELPER FUNCTIONS ///////////////////////////",
      "",
      "function makeComp({ props = {} } = {}) {",
      "\treturn {",
      "\t\t\tui: <${1:Component} {...props} />",
      "\t};",
      "}"
    ],
    "description": "test react"
  },
  "helper funcs": {
    "prefix": "helperfuncs",
    "body": [
      "////////////////////////// ${1} ////////////////////////////",
      "",
      "",
      "${2}"
    ],
    "description": "Helper functions header"
  },

  "Compare previous and current props": {
    "prefix": "compareprops",
    "body": [
      "React.memo(",
      "\t${1:func},",
      "",
      "(a, b) => {",
      "\t\t\tObject.entries(a).forEach(([k, v]) => {",
      "\t\t\t\t\tif (v !== b[k]) {",
      "\t\t\t\t\t\t\tconsole.log(",
      "\t\t\t\t\t\t\t\t\t\"\\n\\t\\tLogging start\\n\\n\\n\\n a !== b\\n\",",
      "\t\t\t\t\t\t\t\t\tk,",
      "\t\t\t\t\t\t\t\t\t\"\\n\",",
      "\t\t\t\t\t\t\t\t\tv,",
      "\t\t\t\t\t\t\t\t\t\"\\n\\n\",",
      "\t\t\t\t\t\t\t\t\tb[k],",
      "\t\t\t\t\t\t\t\t\t\"\\n\\n\\n\\n\\t\\tLogging ends\\n\"",
      "\t\t\t\t\t\t\t);",
      "\t\t\t\t\t}",
      "\t\t\t});",
      "",
      "\t\t\treturn false;",
      "\t}",
      "",
      ");"
    ],
    "description": "Compare previous and current props"
  },

  "Export react functional Component": {
    "prefix": "exportreactfunction",
    "body": [
      "import React from \"react\";",
      "",
      "export function ${1:Component}(props) {",
      "\treturn ${2:<div>1</div>};",
      "}"
    ],
    "description": "Export react functional Component"
  },

  "useEffect react": {
    "prefix": "useEffectReact",
    "body": ["useEffect(() => { ${2} }, [${1}])"],
    "description": "useEffect react"
  },

  "istanbul ignore next": {
    "prefix": "istanbulignore",
    "body": ["// istanbul ignore next:"],
    "description": "istanbul ignore next"
  },

  "immediately invoked function expression": {
    "prefix": "iife",
    "body": ["( function ${1:funName}(){", "\t${2}", "})();"],
    "description": "immediately invoked function expression"
  },

  "console.log JSON.stringify": {
    "prefix": "consolelogjson",
    "body": ["console.log(JSON.stringify(${1:val}, null, 2));"],
    "description": "console.log JSON.stringify"
  },

  "eslint-disable-next-line": {
    "prefix": "eslint-disable-next-line",
    "body": "/* eslint-disable-next-line ${1} */",
    "description": "eslint disable next line"
  },


  "eslint-disable": {
    "prefix": "eslint-disable",
    "body": "/* eslint-disable ${1} */",
    "description": "eslint disable"
  }
}
