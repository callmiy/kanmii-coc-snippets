{
  /*
		// Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and
		// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
		// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
		// same ids are connected.
		// Example:
		"Print to console": {
			"prefix": "log",
			"body": [
				"console.log('$1');",
				"$2"
			],
			"description": "Log output to console"
		}
	*/
  "Print to console": {
    "prefix": "consolelogapplog",
    "body": [
      "console.log(",
      "\t`\\n======================Logging start==================\\n",
      "\t\t\tLabel: ${1:label}",
      "\t`,",
      "\t${2:code},",
      "\t`\\n\\n=====================Logging ends===================\\n`",
      ");"
    ],
    "description": "Log to console with some debug info"
  },

  "Print to console error": {
    "prefix": "consolelogapplogerror",
    "body": [
      "console.log(",
      "\t`\\n======================Logging start==================\\n",
      "\t\t\tLabel: ${1:label}",
      "\t`,",
      "\tnew Error().stack,",
      "\t`\\n\\n`,",
      "\t${2:code},",
      "\t`\\n\\n=====================Logging ends===================\\n`",
      ");"
    ],
    "description": "Log to console with some debug info"
  },

  "console.log JSON.stringify": {
    "prefix": "consolelogjson",
    "body": [
      "console.log(",
      "\t`\\n======================Logging start==================\\n",
      "\t\t\tLabel: ${1:result}",
      "\t`,",
      "\tJSON.stringify(${1:code}, null, 2),",
      "\t`\\n\\n=====================Logging ends===================\\n`",
      ");"
    ],
    "description": "console.log JSON.stringify"
  },

  "const function": {
    "prefix": "constantfunc",
    "body": [
      "const ${1:funcName} = (${2:props}: ${3:type}) => {",
      "\t$0",
      "\treturn null",
      "}"
    ]
  },

  "export const function": {
    "prefix": "exportconstantfunc",
    "body": [
      "export const ${1:funcName} = (${2:props}: ${3:type}) => {",
      "\t$0",
      "\treturn null",
      "}"
    ]
  },

  "export default const function": {
    "prefix": "exportdefaultconstantfunc",
    "body": [
      "export const ${1:funcName} = (${2:props}: ${3:type}) => {",
      "\t$0",
      "\treturn null",
      "}",
      "\n",
      "\n",
      "export default ${1:funcName}"
    ]
  },

  "export constant": {
    "prefix": "exportconstant",
    "body": "export const ${1:name} = $0"
  },

  "export default constant": {
    "prefix": "exportdefaultconstant",
    "body": [
      "export const ${1:name} = $0",
      "\n",
      "\n",
      "export default ${1:name}"
    ]
  },

  "test react": {
    "prefix": "testreact",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "import React, { ComponentType } from \"react\";",
      "import { render, cleanup } from \"@testing-library/react\";",
      "import { ${1:Component} } from \"../components/${1:Component}/\";",
      "",
      "afterEach(() => {",
      "  cleanup();",
      "});",
      "",
      "it(\"renders\", () => {",
      "\tconst { ui } = makeComp();",
      "",
      "\tconst {} = render(ui);",
      "});",
      "",
      "////////////////////////// HELPER FUNCTIONS ///////////////////////////",
      "",
      "function makeComp({ props = {} } = {}) {",
      "\treturn {",
      "\t\t\tui: <${1:Component} {...props} />",
      "\t};",
      "}"
    ],
    "description": "test react"
  },

  "react test": {
    "prefix": "reacttest",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "import React, { ComponentType } from \"react\";",
      "import { render, cleanup } from \"@testing-library/react\";",
      "import { ${1:Component} } from \"../components/${1:Component}/\";",
      "",
      "afterEach(() => {",
      "  cleanup();",
      "});",
      "",
      "",
      "it(\"renders\", () => {",
      "\tconst { ui } = makeComp();",
      "",
      "\tconst {} = render(ui);",
      "});",
      "",
      "////////////////////////// HELPER FUNCTIONS ///////////////////////////",
      "",
      "function makeComp({ props = {} } = {}) {",
      "\treturn {",
      "\t\t\tui: <${1:Component} {...props} />",
      "\t};",
      "}"
    ],
    "description": "test react"
  },

  "dom ready": {
    "prefix": "domready",
    "body": [
      "function domRead() {}",
      "",
      "if (document.readyState !== \"loading\") {",
      "\tconsole.log(\"loading\");",
      "",
      "\tdomRead();",
      "} else {",
      "\tdocument.addEventListener(\"DOMContentLoaded\", domRead);",
      "\tconsole.log(\"ready\");",
      "}"
    ],
    "description": "dom ready"
  },

  "Compare previous and current props": {
    "prefix": "compareprops",
    "body": [
      "React.memo(",
      "\t${1:func},",
      "",
      "(a, b) => {",
      "\t\t\tObject.entries(a).forEach(([k, v]) => {",
      "\t\t\t\t\tif (v !== b[k]) {",
      "\t\t\t\t\t\t\tconsole.log(",
      "\t\t\t\t\t\t\t\t\t\"\\n\\t\\tLogging start\\n\\n\\n\\n a !== b\\n\",",
      "\t\t\t\t\t\t\t\t\tk,",
      "\t\t\t\t\t\t\t\t\t\"\\n\",",
      "\t\t\t\t\t\t\t\t\tv,",
      "\t\t\t\t\t\t\t\t\t\"\\n\\n\",",
      "\t\t\t\t\t\t\t\t\tb[k],",
      "\t\t\t\t\t\t\t\t\t\"\\n\\n\\n\\n\\t\\tLogging ends\\n\"",
      "\t\t\t\t\t\t\t);",
      "\t\t\t\t\t}",
      "\t\t\t});",
      "",
      "\t\t\treturn false;",
      "\t}",
      "",
      ");"
    ],
    "description": "Compare previous and current props"
  },

  "Export react functional Component": {
    "prefix": "exportreactfunction",
    "body": [
      "import React from \"react\";",
      "",
      "export function ${1:Component}(props) {",
      "\treturn ${2:<div>1</div>};",
      "}"
    ],
    "description": "Export react functional Component"
  },

  "useEffect react": {
    "prefix": "useEffectReact",
    "body": ["useEffect(() => { ${2} }, [${1}])"],
    "description": "useEffect react"
  },

  "istanbul ignore next": {
    "prefix": "istanbulignore",
    "body": ["// istanbul ignore next:"],
    "description": "istanbul ignore next"
  },

  "immediately invoked function expression": {
    "prefix": "iife",
    "body": ["( function ${1:funName}(){", "\t${2}", "})();"],
    "description": "immediately invoked function expression"
  },

  "eslint-disable-next-line": {
    "prefix": "eslint-disable-next-line",
    "body": "/* eslint-disable-next-line ${1} */",
    "description": "eslint disable next line"
  },

  "eslint-disable": {
    "prefix": "eslint-disable",
    "body": "/* eslint-disable ${1} */",
    "description": "eslint disable"
  },

  "graphql mutation tag": {
    "prefix": "mutationtag",
    "body": [
      "import gql from \"graphql-tag\";",
      "",
      "",
      "export const ${1:tag_name} = gql`",
      "\tmutation ${2:mutation_name}($input: ${2:mutation_name}Input!) {",
      "\t\t\t${3:function_name}(input: $input) {",
      "",
      "\t\t\t}",
      "\t}",
      "",
      "`;"
    ],
    "description": "graphql mutation tag"
  },

  "graphql mutation tag1": {
    "prefix": "graphqlmutationtag",
    "body": [
      "import gql from \"graphql-tag\";",
      "",
      "",
      "export const ${1:tag_name} = gql`",
      "\tmutation ${2:mutation_name}($input: ${2:mutation_name}Input!) {",
      "\t\t\t${3:function_name}(input: $input) {",
      "",
      "\t\t\t}",
      "\t}",
      "",
      "`;"
    ],
    "description": "graphql mutation tag"
  },

  "jsdoc @type comment": {
    "prefix": "typevariablejsdoc",
    "body": "/** @type {${1}} */",
    "description": "jsdoc @type comment"
  },

  "jsdoc import type": {
    "prefix": "jsdocimporttype",
    "body": "/** @typedef { import('./').${1} } ${1} */",
    "description": "jsdoc import type"
  },

  "jsdoc function annotation": {
    "prefix": "jsdocfunction",
    "body": [
      "/**",
      "\t* @param {string}  p1 - A string param",
      "\t* @return {${1:returnType}}",
      "\t*/"
    ],
    "description": "jsdoc function annotation"
  },

  "svelte test": {
    "prefix": "sveltetest",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "import { render, wait } from \"@testing-library/svelte\";",
      "import ${1} from \"../${1}.svelte\";",
      "",
      "it(\"renders layout\", async () => {",
      "\trender(${1}, {",
      "\t\t\tsegment: \"\"",
      "\t});",
      "",
      "\tawait wait(() => true);",
      "});"
    ],
    "description": "svelte test"
  },

  "test svelte": {
    "prefix": "testsvelte",
    "body": [
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "import { render, wait } from \"@testing-library/svelte\";",
      "import ${1} from \"../${1}.svelte\";",
      "",
      "it(\"renders layout\", async () => {",
      "\trender(${1}, {",
      "\t\t\tsegment: \"\"",
      "\t});",
      "",
      "\tawait wait(() => true);",
      "});"
    ],
    "description": "test svelte"
  },

  "actReactTest": {
    "prefix": "actReactTest",
    "body": ["act(() => {", "\t${1}", "});"],
    "description": "actReactTest"
  },

  "describeTest": {
    "prefix": "describeTest",
    "body": [
      "describe(\"${1:describe_label}\", () => {",
      "\ttest(\"${2:test_label}\", () => {",
      "",
      "\t})",
      "})"
    ],
    "description": "describe test jest"
  },

  "@jest-environment jest-environment-jsdom-sixteen": {
    "prefix": "jsdomenvsixteen",
    "body": ["/**", "* @jest-environment jest-environment-jsdom-sixteen", "*/"],
    "description": "@jest-environment jest-environment-jsdom-sixteen"
  },

  "helper funcs": {
    "prefix": "helperfuncs",
    "body": [
      "// ====================================================",
      "// ${1}",
      "// ====================================================",
      "",
      "",
      "${2}"
    ],
    "description": "Helper functions header"
  }
}
